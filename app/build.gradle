/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'application'
	id("com.diffplug.spotless") version "7.0.2"
}

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

dependencies {
	// This dependency is used by the application.
	implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

spotless {

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}

	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse()
	}

	java {
		// Use the default importOrder configuration
		importOrder()

		removeUnusedImports()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()          // has its own section below

		// Choose one of these formatters.
		eclipse()            // has its own section below

		formatAnnotations()  // fixes formatting of type annotations, see below

		licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}

mainClassName = 'com.application.App'

application {
	// Define the main class for the application.
	mainClass = "${mainClassName}"
}

jar {
	manifest {
		attributes "Main-Class": "${mainClassName}"
	}

	archiveBaseName = "${rootProject.name}"

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}
